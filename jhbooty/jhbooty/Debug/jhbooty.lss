
jhbooty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800060  00800060  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a93  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ee  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d3  00000000  00000000  00001f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_13>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 3a       	cpi	r26, 0xA5	; 165
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int main(void)
{
    SelfProgramming_t SelfProgramm;
	
	uart_init( UART_BAUD_SELECT( 9600 , F_CPU ) );
  7c:	87 e6       	ldi	r24, 0x67	; 103
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 96 00 	call	0x12c	; 0x12c <uart_init>
	
    while (1) 
    {
		uint16_t RxByte = uart_getc();
  84:	0e 94 aa 00 	call	0x154	; 0x154 <uart_getc>
  88:	fd cf       	rjmp	.-6      	; 0x84 <main+0x8>

0000008a <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  9e:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  a0:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  a2:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <UART_RxHead>
  a8:	ef 5f       	subi	r30, 0xFF	; 255
  aa:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <UART_RxTail>
  b0:	e9 17       	cp	r30, r25
  b2:	39 f0       	breq	.+14     	; 0xc2 <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  b4:	e0 93 62 00 	sts	0x0062, r30	; 0x800062 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	eb 59       	subi	r30, 0x9B	; 155
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	20 83       	st	Z, r18
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  c2:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
  c4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  c8:	89 2b       	or	r24, r25
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <UART_TxHead>
  f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <UART_TxTail>
  fc:	98 17       	cp	r25, r24
  fe:	61 f0       	breq	.+24     	; 0x118 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 100:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <UART_TxTail>
 104:	ef 5f       	subi	r30, 0xFF	; 255
 106:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 108:	e0 93 63 00 	sts	0x0063, r30	; 0x800063 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	eb 57       	subi	r30, 0x7B	; 123
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
 114:	8c b9       	out	0x0c, r24	; 12
 116:	01 c0       	rjmp	.+2      	; 0x11a <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 118:	55 98       	cbi	0x0a, 5	; 10
    }
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 12c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <UART_TxHead>
    UART_TxTail = 0;
 130:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <UART_TxTail>
    UART_RxHead = 0;
 134:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <UART_RxHead>
    UART_RxTail = 0;
 138:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <UART_RxTail>
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 13c:	99 23       	and	r25, r25
 13e:	1c f4       	brge	.+6      	; 0x146 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 140:	22 e0       	ldi	r18, 0x02	; 2
 142:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 144:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 146:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 148:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 14a:	88 e9       	ldi	r24, 0x98	; 152
 14c:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	80 bd       	out	0x20, r24	; 32
 152:	08 95       	ret

00000154 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 154:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <UART_RxHead>
 158:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <UART_RxTail>
 15c:	98 17       	cp	r25, r24
 15e:	81 f0       	breq	.+32     	; 0x180 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 160:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <UART_RxTail>
 164:	ef 5f       	subi	r30, 0xFF	; 255
 166:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 168:	e0 93 61 00 	sts	0x0061, r30	; 0x800061 <UART_RxTail>
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	eb 59       	subi	r30, 0x9B	; 155
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
 174:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
    UART_LastRxError = 0;
 178:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
    return data;
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
